name: Build & Deploy to Cloud Run

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: read

jobs:
  build-and-deploy:
    # environment: 'production' for main, otherwise 'dev' (env gating handled in repo settings)
    environment: ${{ contains(github.ref, 'refs/heads/main') && 'production' || 'dev' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Authenticate to GCP using the service account JSON stored in secrets.GCP_SA_KEY
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Install gcloud CLI (no unsupported inputs)
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          install_components: 'gke-gcloud-auth-plugin'

      # -----------------------
      # Ensure GCS CORS is set (idempotent)
      # -----------------------
      - name: Ensure GCS CORS is set (idempotent)
        # Uses same credentials from "Authenticate to GCP" above.
        env:
          BUCKET: ${{ secrets.GCS_BUCKET }}
          # Edit these to match EXACT origins where your frontend is served (protocol+host+port).
          FRONTEND_ORIGINS: |
            http://127.0.0.1:8000
            http://localhost:8000
            https://filetagapi-dev-24717612698.asia-south1.run.app
            # Uncomment/add your production origin if needed:
            # https://filetagapi-prod-XXXXXXXXXX.a.run.app
        run: |
          echo "Writing cors.json for bucket: $BUCKET"
          # Build JSON array from FRONTEND_ORIGINS (multiline env var)
          ORIGINS_ARRAY=$(printf '%s\n' "$FRONTEND_ORIGINS" | awk 'NF { printf "\"%s\",", $0 }' | sed 's/,$//')
          cat > cors.json <<EOF
          [{
            "origin": [${ORIGINS_ARRAY}],
            "method": ["GET","HEAD"],
            "responseHeader": ["Content-Type","Content-Disposition","x-goog-resumable","x-goog-meta-*"],
            "maxAgeSeconds": 3600
          }]
          EOF
          echo "Applying CORS to gs://$BUCKET"
          gsutil cors set cors.json gs://$BUCKET
          echo "Current CORS for gs://$BUCKET:"
          gsutil cors get gs://$BUCKET || true

      # DEBUG + Explicitly configure docker credential helper for Artifact Registry host
      - name: Configure Docker to use gcloud credentials for Artifact Registry (asia-south1)
        run: |
          echo "=== GCloud active account ==="
          gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet

      - name: Build Docker image (backend)
        run: |
          cd backend
          IMAGE="asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/filetagapi-repo/filetagapi:${{ github.sha }}"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker image to Artifact Registry
        run: |
          cd backend
          docker push "${{ env.IMAGE }}"

      - name: Deploy to Cloud Run
        env:
          IMAGE: ${{ env.IMAGE }}
          REGION: ${{ secrets.GCP_REGION }}
          BUCKET: ${{ secrets.GCS_BUCKET }}
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            SERVICE="filetagapi-prod"
            ENVIRONMENT="prod"
          else
            SERVICE="filetagapi-dev"
            ENVIRONMENT="dev"
          fi
          echo "Deploying $IMAGE to $SERVICE in region ${REGION}"
          gcloud run deploy "$SERVICE" \
            --image "$IMAGE" \
            --region "$REGION" \
            --platform managed \
            --allow-unauthenticated \
            --service-account=filetagapi-runner-sa@${{ secrets.GCP_PROJECT }}.iam.gserviceaccount.com \
            --set-env-vars="ENV=${ENVIRONMENT},USE_GCS=1,GCS_BUCKET=${BUCKET}" \
            --quiet

      - name: Output Cloud Run URL
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            SERVICE="filetagapi-prod"
          else
            SERVICE="filetagapi-dev"
          fi
          gcloud run services describe "$SERVICE" --region="${{ secrets.GCP_REGION }}" --platform=managed --format="value(status.url)"
